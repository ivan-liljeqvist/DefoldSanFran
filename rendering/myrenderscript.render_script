function init(self)
    self.tile_pred = render.predicate({"tile"})
    self.gui_pred = render.predicate({"gui"})
    self.text_pred = render.predicate({"text"})
    self.particle_pred = render.predicate({"particle"})

    self.clear_color = vmath.vector4(0, 0, 0, 0)
    self.clear_color.x = sys.get_config("render.clear_color_red", 0)
    self.clear_color.y = sys.get_config("render.clear_color_green", 0)
    self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
    self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)

    self.view = vmath.matrix4()
    self.projection=vmath.matrix4();
end

function update(self)
    -- Set the depth mask which allows us to modify the depth buffer.
    render.set_depth_mask(true)
    -- Clear the color buffer with the clear color value and set the depth buffer to 1.0.
    -- The normal depth values are between 0.0 (near) and 1.0 (far) so maximizing the values
    -- throughout the buffer means that every pixel you draw will be nearer than 1.0 and thus
    -- it will be properly drawn and depth testing will work from thereon.
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1})
    -- Set the viewport to the window dimensions.
    render.set_viewport(0, 0, render.get_window_width(), render.get_window_height())
    -- Set the view to the stored view value (can be set by a camera object)
    render.set_view(self.view)
    -- We're gonna start by drawing 2D stuff (sprites and tiles) so we can disable
    -- depth testing and unset the depth mask.
    render.set_depth_mask(false)
    render.disable_state(render.STATE_DEPTH_TEST)
    -- Enable blending.
    render.enable_state(render.STATE_BLEND)
    -- Set the blend function. We're gonna use the source alpha as the source
    -- blend factor. The destination blend factor is set to one minus the source
    -- object alpha value (1-src).
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    -- Everything is drawn facing the camera so we can disable face culling.
    render.disable_state(render.STATE_CULL_FACE)
	-- Set the projection to orthographic and only render between -1 and 1 Z-depth
    -- (fine for 2D).
    render.set_projection(vmath.matrix4_orthographic(0, render.get_width(), 0, render.get_height(), -1, 1))
    -- Now, draw everything in the "tile_pred" predicate (tiles and sprites)
    render.draw(self.tile_pred)
    -- Then draw particles.
    render.draw(self.particle_pred)
    -- Now it's time for some 3D. The built in script is not fit for that so
    -- we have a specific predicate prepared for 3D models.
    -- First, need to set the depth mask and enable depth test.
    render.set_depth_mask(true)
    render.enable_state(render.STATE_DEPTH_TEST)
    -- Face culling makes sense when drawing 3D.
    render.enable_state(render.STATE_CULL_FACE)
    -- Keep drawing orthographically, but increase the projection depth so
    -- our models won't clip. If they clip you can disable face culling to see how
    -- the inside of the clipped object is drawn.
    render.set_projection(vmath.matrix4_orthographic(0, render.get_width(), 0, render.get_height(), -1000, 1000))
    -- Draw the model predicate.
    render.draw(self.model_pred)
    -- Draw 3D debug information (generated by the engine)
    render.draw_debug3d()
    -- GUI and on screen text will be drawn in screen space so we're gonna use a
    -- zero view matrix.
    render.set_view(vmath.matrix4())
    -- Projection is still orthographic but use actual window width and height,
    -- in case it's been resized.
    render.set_projection(vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), -1, 1))
    -- No depth mask or face culling needed for GUI and text.
    render.set_depth_mask(false)
    render.disable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_CULL_FACE)
    -- Draw the predicates.
    render.draw(self.gui_pred)
    render.draw(self.text_pred)
    -- Draw 2D debug overlay (generated by the engine).
    render.draw_debug2d()
end

function on_message(self, message_id, message)
    if message_id == hash("clear_color") then
        self.clear_color = message.color
    elseif message_id == hash("set_view_projection") then
        self.view = message.view
    end
    
    if message_id == hash("set_view_projection") then
    	-- Camera view and projection arrives here. Store them.
        self.view = message.view
        self.projection = message.projection
    end
end
